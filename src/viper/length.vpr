field next: Ref
field elem: Int

predicate list(this: Ref) {
    acc(this.elem) && acc(this.next) && 
    (this.next != null ==> list(this.next))
}

method length(this: Ref) returns (res: Int)
    requires list(this)
    ensures list(this)
{
    res := 0
    var curr: Ref := this
    unfold list(this)
    while (curr.next != null)
        invariant acc(curr.next) && (curr.next != null ==> list(curr.next))
    {
        res := res + 1
        curr := curr.next
        unfold list(curr)
    }

    fold list(this)
}