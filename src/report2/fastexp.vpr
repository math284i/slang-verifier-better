// -----------------------------------------
// Runtime model
// Notice that we can hold at most one permission
// to *fields*, but this does not apply to *predicates*
predicate time_credit() // represents one abstract unit of time

// models spending an abstract unit of time 
// needs to be called at the beginning of every method
// and loop iteration
method consume_time_credit() // 
    requires acc(time_credit(), 1/1)
// -----------------------------------------


// -----------------------------------------
// Mathematical definition of n^e
function math_pow(n: Int, e: Int): Int
    requires 0 <= e
{
    e == 0 ? 1 : n * math_pow(n, e - 1)
}
// -----------------------------------------

// -----------------------------------------
// You can use this lemma without a proof
method lemma_pow(b: Int, y: Int) 
    requires 0 <= y
    requires y % 2 == 0 // y is even
    ensures math_pow(b, y) == math_pow(b * b, y / 2)
// -----------------------------------------

function div_count(e: Int): Int
    requires 0 < e
    ensures result > 0
{
    e == 1 ? 1 : 1 + div_count(e / 2)
}

function bound(e: Int): Int
    requires e > 0
    ensures result >= 0
{
    e == 1 ? 1 : 1 + bound(e / 2)
}

// -----------------------------------------
// Task 2: Prove a runtime bound for the following recursive method
// Your bound should be tight, i.e. use as few time credits
// as possible. Furthermore, try to prove that it is not possible
// to use fewer time credits.
// Do not modify the given production code. However, feel free to 
// introduce additional functions, lemma methods or ghost code.
// Furthermore, make sure that the functional contract remains intact.
method fast_pow(n: Int, e: Int)
    returns (res: Int)
    requires 0 < e

    requires acc(time_credit(), 1/1) && acc(time_credit(), (bound(e) + 1)/1) // Allocate time credits
    ensures res == math_pow(n, e)
    ensures acc(time_credit(), 0/1) // All credits are consumed
{
    consume_time_credit() // 1 credit for method entry

    var b: Int := n
    var y: Int := e
    res := 1

    while (y > 0)
    invariant y >= 0
    invariant y > 0 ==> acc(time_credit(), (bound(y) + 1)/1)
    decreases y
    invariant res * math_pow(b, y) == math_pow(n, e) // Functional invariant
    {
        consume_time_credit() // 1 credit per iteration

        if (y % 2 == 1) {
            res := res * b
            lemma_pow(b, y - 1)
        } else {
            lemma_pow(b, y)
        }

        y := y / 2
        b := b * b
    }
}


// -----------------------------------------