/*
 * CHALLENGE 1
 * The Viper code below shows a method that recursively computes the n-th Fibonacci number. 
 * First, prove functional correctness, i.e. that the method indeed returns the n-th Fibonacci number.
 * After that, find the smallest upper bound on the method's runtime in our runtime model.
 * Finally, prove that your bound is indeed the smallest upper bound on the method's runtime.
 */


// -----------------------------------------
// Runtime model
// Notice that we can hold at most one permission
// to *fields*, but this does not apply to *predicates*
predicate time_credit() // represents one abstract unit of time

// models spending an abstract unit of time
// needs to be called at the beginning of every method
// and loop iteration
method consume_time_credit() //
    requires acc(time_credit(), 1/1)
// -----------------------------------------
// function to calculate the n-th Fibonacci number
function fib(n: Int): Int
    requires n >= 0
    ensures result >= 0
{
    n <= 1 ? n : fib(n - 1) + fib(n - 2)
}

// compute the required time credits for the fib function
function fib_time(n: Int): Int
    requires n >= 0
    ensures result >= 0
{
    n <= 1 ? 1 : fib_time(n - 1) + fib_time(n - 2) + 1
}
// -----------------------------------------
// Task 1: Prove a runtime bound for the following recursive method
// Your bound should be tight, i.e. use as few time credits
// as possible. Furthermore, prove that it is not possible
// to use fewer time credits.
// Do not modify the given production code. However, feel free to 
// introduce additional functions, lemma methods or ghost code.
// Furthermore, make sure that the functional contract remains intact.
method fib_recursive(n: Int) returns (res: Int)
    requires n >= 0
    requires acc(time_credit(), fib_time(n)/1) // require that the method has enough time credits, depending on n
    ensures res == fib(n) // ensure the functional correctness
    ensures acc(time_credit(), 0/1) // ensure that all time credits are consumed
{
    consume_time_credit() // we must spend a credit for every call

    if (n == 0) {
        res := 0
    } elseif (n == 1) {
        res := 1
    } else {
        var sub1: Int
        sub1 := fib_recursive(n - 1)

        var sub2: Int
        sub2 := fib_recursive(n - 2)

        res := sub1 + sub2
    }
}
// -----------------------------------------